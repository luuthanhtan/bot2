// commands/ai.js
if (process.env.APP_ENV == 'local') {
    const db = require('../utils/sddatabase3');
} else {
    const db = require('../utils/database');
}
require('../utils/logger');

module.exports = {
    name: 'ai',
    description: 'Talk to the AI with persistent conversation history using the current chat. ü§ñ',
    
    async execute(message, args, config, logModAction, sendEmbedMessage, client, model) {
        if (!args.length) {
            return message.reply('‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p n·ªôi dung ƒë·ªÉ g·ªçi AI.');
        }

        let userId = message.author.id;
        const member = message.mentions.members.first();
        if (member) {
            userId = member.id;
            args.shift();
        }
        const prompt = args.join(' ');

        try {
            // Th√¥ng b√°o ƒëang x·ª≠ l√Ω
            const processingMsg = await message.channel.send('ü§î ƒêang x·ª≠ l√Ω...');
            
            // L·∫•y l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán t·ª´ database (gi·ªõi h·∫°n 5 c·∫∑p tin nh·∫Øn g·∫ßn nh·∫•t)
            let historyRows = await db.getCurrentChatHistory(userId, 5);
            
            // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ DB sang ƒë·ªãnh d·∫°ng m√† Gemini API y√™u c·∫ßu
            let conversation = historyRows.map(row => ({
                role: row.role,
                parts: [{ text: row.content }]
            }));
            
            console.log(`üó£Ô∏è L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán c·ªßa ${userId}: ${JSON.stringify(conversation)}`);
            
            // Ki·ªÉm tra xem l·ªãch s·ª≠ c√≥ tr·ªëng kh√¥ng
            if (conversation.length === 0) {
                // N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠, ch·ªâ c·∫ßn g·ª≠i prompt tr·ª±c ti·∫øp
                try {
                    const result = await model.generateContent(prompt);
                    const content = result.response.text();
                    
                    // L∆∞u c·∫£ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi v√†o database
                    await db.addChatMessage(userId, 'user', prompt);
                    await db.addChatMessage(userId, 'model', content);
                    
                    // T√≥m t·∫Øt v√† c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ cu·ªôc tr√≤ chuy·ªán
                    await db.summarizeAndUpdateChatTitle(userId, model);
                    
                    // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
                    await processingMsg.delete();
                    
                    // G·ª≠i c√¢u tr·∫£ l·ªùi cho ng∆∞·ªùi d√πng
                    await sendEmbedMessage(message.channel, message.author, content);
                                        
                } catch (error) {
                    console.error(`‚ùå L·ªói khi g·ªçi generateContent: ${error.message}`);
                    // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
                    await processingMsg.delete();
                    message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
                return;
            }
            
            // N·∫øu c√≥ l·ªãch s·ª≠, s·ª≠ d·ª•ng startChat ƒë·ªÉ duy tr√¨ ng·ªØ c·∫£nh
            try {
                // T·∫°o chat v·ªõi l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
                const chat = model.startChat({
                    history: conversation,
                    generationConfig: {
                        maxOutputTokens: 1000,
                    }
                });
                
                // G·ª≠i prompt t·ªõi AI
                const result = await chat.sendMessage(prompt);
                const content = result.response.text();
                
                // L∆∞u tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o database
                await db.addChatMessage(userId, 'user', prompt);
                
                // L∆∞u c√¢u tr·∫£ l·ªùi c·ªßa AI v√†o database
                await db.addChatMessage(userId, 'model', content);
                
                // T√≥m t·∫Øt v√† c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ cu·ªôc tr√≤ chuy·ªán
                await db.summarizeAndUpdateChatTitle(userId, model);
                
                // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
                await processingMsg.delete();
                
                // G·ª≠i c√¢u tr·∫£ l·ªùi cho ng∆∞·ªùi d√πng
                await sendEmbedMessage(message.channel, message.author, content);
                                
            } catch (error) {
                console.error(`‚ùå L·ªói khi g·ªçi startChat: ${error.message}`);
                // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
                await processingMsg.delete();
                
                // Th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
                message.reply('üîÑ ƒêang th·ª≠ l·∫°i v·ªõi cu·ªôc tr√≤ chuy·ªán m·ªõi...');
                
                // T·∫°o m·ªôt cu·ªôc tr√≤ chuy·ªán m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i
                try {
                    // T·∫°o chat m·ªõi
                    await db.createNewChat(userId);
                    
                    // G·ªçi AI v·ªõi prompt
                    const result = await model.generateContent(prompt);
                    const content = result.response.text();
                    
                    // L∆∞u c·∫£ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi v√†o database
                    await db.addChatMessage(userId, 'user', prompt);
                    await db.addChatMessage(userId, 'model', content);
                    
                    // T√≥m t·∫Øt v√† c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ cu·ªôc tr√≤ chuy·ªán
                    await db.summarizeAndUpdateChatTitle(userId, model);
                    
                    // G·ª≠i c√¢u tr·∫£ l·ªùi cho ng∆∞·ªùi d√πng
                    await sendEmbedMessage(message.channel, message.author, content);
                    
                } catch (fallbackError) {
                    console.error(`‚ùå L·ªói khi th·ª≠ l·∫°i v·ªõi generateContent: ${fallbackError.message}`);
                    message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
            }
        } catch (error) {
            console.error(`‚ùå L·ªói chung khi g·ªçi AI: ${error.message}`);
            message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    },
};