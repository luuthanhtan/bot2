const db = require('../utils/database.js');
const logger = require('../utils/logger');
const { EmbedBuilder } = require('discord.js');

module.exports = {
    name: 'gai',
    description: 'Tr√≤ chuy·ªán AI trong chat to√†n c·ª•c v·ªõi c√°c cu·ªôc tr√≤ chuy·ªán ri√™ng bi·ªát',

    async execute(message, args, config, logModAction, sendEmbedMessage, client, model) {
        const subCommand = args[0] ? args[0].toLowerCase() : null;

        switch (subCommand) {
            case 'history':
                return await this.showGlobalChatList(message);

            case 'newchat':
                return await this.startNewGlobalChat(message);

            case 'continue':
                return await this.continueGlobalChat(message, args[1]);

            case 'deletehistory':
                return await this.deleteGlobalChatHistory(message, args[1]);

            default:
                return await this.processGlobalChatMessage(message, args, model, sendEmbedMessage);
        }
    },
    async deleteGlobalChatHistory(message, chatId = null) {
        try {
            // Ki·ªÉm tra n·∫øu c√≥ chatId ƒë∆∞·ª£c cung c·∫•p
            if (chatId) {
                // Ki·ªÉm tra xem chatId c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng (a{s·ªë})
                if (!chatId.match(/^g\d+$/)) {
                    return message.reply('‚ùå ID cu·ªôc tr√≤ chuy·ªán kh√¥ng h·ª£p l·ªá. ID ph·∫£i c√≥ ƒë·ªãnh d·∫°ng "g" theo sau l√† m·ªôt s·ªë, v√≠ d·ª•: a1, a2, a3, ...');
                }
                
                // Th√¥ng b√°o ƒëang x·ª≠ l√Ω
                const processingMsg = await message.channel.send(`üóëÔ∏è ƒêang x√≥a cu·ªôc tr√≤ chuy·ªán ${chatId}...`);
                
                try {
                    // X√≥a cu·ªôc tr√≤ chuy·ªán theo ID
                    await db.deleteGlobalChatById(userId, chatId);
                    
                    // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
                    await processingMsg.delete().catch(() => {});
                    
                    // G·ª≠i x√°c nh·∫≠n
                    await message.reply(`‚úÖ ƒê√£ x√≥a cu·ªôc tr√≤ chuy·ªán ${chatId}.`);
                    
                    // Ghi log
                    console.log(`User ${message.author.tag} (${userId}) ƒë√£ x√≥a cu·ªôc tr√≤ chuy·ªán ${chatId}.`);
                } catch (error) {
                    // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
                    await processingMsg.delete().catch(() => {});
                    
                    // Th√¥ng b√°o l·ªói
                    await message.reply(`‚ùå ${error.message}`);
                }
            } else {
                // X√≥a to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán
                // Th√¥ng b√°o ƒëang x·ª≠ l√Ω
                const processingMsg = await message.channel.send('üóëÔ∏è ƒêang x√≥a to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán...');
                
                // X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán AI
                await db.deleteGlobalChatHistory();
                
                // T·∫°o m·ªôt cu·ªôc tr√≤ chuy·ªán m·ªõi ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng
                await db.createNewGlobalChat(userId);
                
                // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
                await processingMsg.delete().catch(() => {});
                
                // G·ª≠i x√°c nh·∫≠n
                await message.reply('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa b·∫°n v·ªõi AI. M·ªôt cu·ªôc tr√≤ chuy·ªán m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o.');
                
                // Ghi log
                console.log(`User ${message.author.tag} (${userId}) ƒë√£ x√≥a to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán AI.`);
            }
        } catch (error) {
            console.error(`L·ªói khi x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán: ${error.message}`);
            message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    },
    async showGlobalChatList(message) {
        try {
            const chatList = await db.getGlobalChatList();

            if (chatList.length === 0) {
                return message.reply('Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o.');
            }

            const embed = new EmbedBuilder()
                .setTitle('Danh S√°ch Chat To√†n C·ª•c')
                .setColor('#00FF00')
                .setDescription('C√°c cu·ªôc tr√≤ chuy·ªán hi·ªán c√≥:')
                .setFooter({
                    text: `Y√™u c·∫ßu b·ªüi ${message.author.tag}`,
                    iconURL: message.author.displayAvatarURL()
                })
                .setTimestamp();

            for (const chat of chatList) {
                embed.addFields({
                    name: `Chat ID: ${chat.chatId}`,
                    value: `S·ªë tin nh·∫Øn: ${chat.messageCount}`,
                    inline: false
                });
            }

            await message.channel.send({ embeds: [embed] });

        } catch (error) {
            logger.error(`L·ªói khi xem danh s√°ch chat: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch chat.');
        }
    },

    async startNewGlobalChat(message) {
        const senderId = message.author.id;
        try {
            // T·∫°o m·ªôt cu·ªôc tr√≤ chuy·ªán m·ªõi
            await db.createNewGlobalChat(senderId);
            
            // G·ª≠i x√°c nh·∫≠n
            await message.reply('ƒê√£ t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán v·ªõi l·ªánh `!gai`.');
            
            // Ghi log
            console.log(`User ${message.author.tag} (${userId}) ƒë√£ t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi.`);
            
            // LO·∫†I B·ªé ph·∫ßn x√≥a l·ªánh c·ªßa ng∆∞·ªùi d√πng
            // const fetchedMessage = await message.channel.messages.fetch(message.id).catch(() => null);
            // if (fetchedMessage) {
            //     await message.delete();
            // }
        } catch (error) {
            console.error(`L·ªói khi t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    },

    async continueGlobalChat(message, chatId) {
        if (!chatId || !chatId.startsWith('g')) {
            return message.reply('Vui l√≤ng cung c·∫•p Chat ID h·ª£p l·ªá (v√≠ d·ª•: g1, g2).');
        }

        try {
            const chats = await db.getGlobalChats();
            const targetChat = chats.find(chat => chat.chat_id === chatId);
            
            if (!targetChat) {
                return message.reply(`Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán v·ªõi ID "${chatId}". Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c s·ª≠ d·ª•ng l·ªánh \`!chats\` ƒë·ªÉ xem danh s√°ch cu·ªôc tr√≤ chuy·ªán c·ªßa b·∫°n.`);
            }
            
            // C·∫≠p nh·∫≠t th·ªùi gian truy c·∫≠p ƒë·ªÉ ƒë·∫∑t cu·ªôc tr√≤ chuy·ªán n√†y th√†nh hi·ªán t·∫°i
            await db.updateGlobalChatTime(targetChat.id);
            const messages = await db.getGlobalChatMessages(chatId, 5);

            if (messages.length === 0) {
                return message.reply(`Kh√¥ng t√¨m th·∫•y tin nh·∫Øn trong chat ${chatId}.`);
            }

            const embed = new EmbedBuilder()
                .setTitle(`Ti·∫øp t·ª•c Chat: ${chatId}`)
                .setColor('#0099ff')
                .setDescription('C√°c tin nh·∫Øn g·∫ßn ƒë√¢y:')
                .setFooter({
                    text: `Y√™u c·∫ßu b·ªüi ${message.author.tag}`,
                    iconURL: message.author.displayAvatarURL()
                })
                .setTimestamp();

            messages.forEach(msg => {
                const roleName = msg.role === 'user' ? 'üë§' : 'ü§ñ';
                embed.addFields({
                    name: `${roleName} ${msg.user_id}`,
                    value: msg.content.substring(0, 200) + (msg.content.length > 200 ? '...' : ''),
                    inline: false
                });
            });

            await message.channel.send({ embeds: [embed] });
            message.reply(`ƒê√£ chuy·ªÉn ƒë·∫øn chat ${chatId}. B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c tr√≤ chuy·ªán.`);

        } catch (error) {
            logger.error(`L·ªói khi ti·∫øp t·ª•c chat: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi ti·∫øp t·ª•c chat.');
        }
    },

    async processGlobalChatMessage(message, args, model, sendEmbedMessage) {
        if (!args.length) {
            return message.reply('Vui l√≤ng nh·∫≠p n·ªôi dung ƒë·ªÉ tr√≤ chuy·ªán v·ªõi AI.');
        }

        const userId = message.author.id;
        const prompt = args.join(' ');

        try {
            // Th√¥ng b√°o ƒëang x·ª≠ l√Ω
            const processingMsg = await message.channel.send('ü§î ƒêang x·ª≠ l√Ω...');

            // L·∫•y l·ªãch s·ª≠ chat
            let historyRows = await db.getCurrentGlobalChatHistory(userId, 5);

            // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ DB sang ƒë·ªãnh d·∫°ng Gemini API
            let conversation = historyRows.map(row => ({
                role: row.role,
                parts: [{ text: row.content }]
            }));

            // B·∫Øt ƒë·∫ßu chat v·ªõi l·ªãch s·ª≠
            if (conversation.length === 0) {
                // N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠, ch·ªâ c·∫ßn g·ª≠i prompt tr·ª±c ti·∫øp
                try {
                    const result = await model.generateContent(prompt);
                    const content = result.response.text();
                    
                    // L∆∞u c·∫£ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi v√†o database
                    await db.addGlobalChatMessage(userId, 'user', prompt);
                    await db.addGlobalChatMessage(userId, 'model', content);
                    
                    // T√≥m t·∫Øt v√† c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ cu·ªôc tr√≤ chuy·ªán
                    await db.summarizeAndUpdateGlobalChatTitle(userId, model);
                    
                    // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
                    await processingMsg.delete();
                    
                    // G·ª≠i c√¢u tr·∫£ l·ªùi cho ng∆∞·ªùi d√πng
                    await sendEmbedMessage(message.channel, message.author, content);
                    
                    // LO·∫†I B·ªé ph·∫ßn x√≥a l·ªánh c·ªßa ng∆∞·ªùi d√πng
                    // const fetchedMessage = await message.channel.messages.fetch(message.id).catch(() => null);
                    // if (fetchedMessage) {
                    //     await message.delete();
                    // }
                } catch (error) {
                    console.error(`L·ªói khi g·ªçi generateContent: ${error.message}`);
                    // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
                    await processingMsg.delete();
                    message.reply('C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
                return;
            }
            
            // N·∫øu c√≥ l·ªãch s·ª≠, s·ª≠ d·ª•ng startChat ƒë·ªÉ duy tr√¨ ng·ªØ c·∫£nh
            try {
                // T·∫°o chat v·ªõi l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
                const chat = model.startChat({
                    history: conversation,
                    generationConfig: {
                        maxOutputTokens: 1000,
                    }
                });
                
                // G·ª≠i prompt t·ªõi AI
                const result = await chat.sendMessage(prompt);
                const content = result.response.text();
                
                // L∆∞u tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o database
                await db.addGlobalChatMessage(userId, 'user', prompt);
                
                // L∆∞u c√¢u tr·∫£ l·ªùi c·ªßa AI v√†o database
                await db.addGlobalChatMessage(userId, 'model', content);
                
                // T√≥m t·∫Øt v√† c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ cu·ªôc tr√≤ chuy·ªán
                await db.summarizeAndUpdateGlobalChatTitle(userId, model);
                
                // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
                await processingMsg.delete();
                
                // G·ª≠i c√¢u tr·∫£ l·ªùi cho ng∆∞·ªùi d√πng
                await sendEmbedMessage(message.channel, message.author, content);
                
                // LO·∫†I B·ªé ph·∫ßn x√≥a l·ªánh c·ªßa ng∆∞·ªùi d√πng
                // const fetchedMessage = await message.channel.messages.fetch(message.id).catch(() => null);
                // if (fetchedMessage) {
                //     await message.delete();
                // }
            } catch (error) {
                console.error(`L·ªói khi g·ªçi startChat: ${error.message}`);
                // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
                await processingMsg.delete();
                
                // Th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
                message.reply('C√≥ l·ªói x·∫£y ra khi g·ªçi AI. ƒêang th·ª≠ l·∫°i v·ªõi cu·ªôc tr√≤ chuy·ªán m·ªõi...');
                
                // T·∫°o m·ªôt cu·ªôc tr√≤ chuy·ªán m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i
                try {
                    // T·∫°o chat m·ªõi
                    await db.createNewGlobalChat(userId);
                    
                    // G·ªçi AI v·ªõi prompt
                    const result = await model.generateContent(prompt);
                    const content = result.response.text();
                    
                    // L∆∞u c·∫£ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi v√†o database
                    await db.addGlobalChatMessage(userId, 'user', prompt);
                    await db.addGlobalChatMessage(userId, 'model', content);
                    
                    // T√≥m t·∫Øt v√† c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ cu·ªôc tr√≤ chuy·ªán
                    await db.summarizeAndUpdateGlobalChatTitle(userId, model);
                    
                    // G·ª≠i c√¢u tr·∫£ l·ªùi cho ng∆∞·ªùi d√πng
                    await sendEmbedMessage(message.channel, message.author, content);
                } catch (fallbackError) {
                    console.error(`L·ªói khi th·ª≠ l·∫°i v·ªõi generateContent: ${fallbackError.message}`);
                    message.reply('C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
            }
        } catch (error) {
            console.error(`L·ªói chung khi g·ªçi AI: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    },

    async showGlobalChatList(message) {
        try {
            const chatList = await db.getGlobalChatList();

            if (chatList.length === 0) {
                return message.reply('Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o.');
            }

            const embed = new EmbedBuilder()
                .setTitle('Danh S√°ch Chat To√†n C·ª•c')
                .setColor('#00FF00')
                .setDescription('C√°c cu·ªôc tr√≤ chuy·ªán hi·ªán c√≥:')
                .setFooter({
                    text: `Y√™u c·∫ßu b·ªüi ${message.author.tag}`,
                    iconURL: message.author.displayAvatarURL()
                })
                .setTimestamp();

            for (const chat of chatList) {
                embed.addFields({
                    name: `Chat ID: ${chat.chatId}`,
                    value: `S·ªë tin nh·∫Øn: ${chat.messageCount}\nT√≥m t·∫Øt: ${chat.summary}`,
                    inline: false
                });
            }

            await message.channel.send({ embeds: [embed] });

        } catch (error) {
            logger.error(`L·ªói khi xem danh s√°ch chat: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch chat.');
        }
    },

};