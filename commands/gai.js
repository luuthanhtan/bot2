const db = require('../utils/database.js');
require('../utils/logger');
const { EmbedBuilder } = require('discord.js');

module.exports = {
    name: 'gai',
    description: 'Tr√≤ chuy·ªán AI trong chat to√†n c·ª•c v·ªõi c√°c cu·ªôc tr√≤ chuy·ªán ri√™ng bi·ªát',
    
    async execute(message, args, config, logModAction, sendEmbedMessage, client, model) {
        const subCommand = args[0] ? args[0].toLowerCase() : null;
        
        switch(subCommand) {
            case 'history':
                return await this.showGlobalChatList(message);
            
            case 'newchat':
                return await this.startNewGlobalChat(message);
            
            case 'continue':
                return await this.continueGlobalChat(message, args[1]);

            case 'deletehistory':
                return await this.deleteGlobalChatHistory(message, args[1]);

            default:
                return await this.processGlobalChatMessage(message, args, model, sendEmbedMessage);
        }
    },
    async deleteGlobalChatHistory(message, chatId) {
        try {
            if (!chatId) {
                // X√≥a to√†n b·ªô l·ªãch s·ª≠
                await db.deleteGlobalChatHistory();
                return message.reply('ƒê√£ x√≥a to√†n b·ªô l·ªãch s·ª≠ chat to√†n c·ª•c.');
            }
    
            // Ki·ªÉm tra ƒë·ªãnh d·∫°ng chatId
            if (!chatId.startsWith('g')) {
                return message.reply('Chat ID kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng gx (v√≠ d·ª•: g1, g2).');
            }
    
            // Ki·ªÉm tra chatId c√≥ t·ªìn t·∫°i
            const chatList = await db.getGlobalChatList();
            const existingChat = chatList.find(chat => chat.chatId === chatId);
    
            if (!existingChat) {
                return message.reply(`Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán ${chatId}.`);
            }
    
            // X√≥a l·ªãch s·ª≠ chat c·ª• th·ªÉ
            await db.deleteGlobalChatHistory(chatId);
    
            message.reply(`ƒê√£ x√≥a l·ªãch s·ª≠ chat ${chatId} th√†nh c√¥ng.`);
    
        } catch (error) {
           console.error(`L·ªói khi x√≥a l·ªãch s·ª≠ global chat: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi x√≥a l·ªãch s·ª≠ chat.');
        }
    },
    async showGlobalChatList(message) {
        try {
            const chatList = await db.getGlobalChatList();
            
            if (chatList.length === 0) {
                return message.reply('Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o.');
            }
            
            const embed = new EmbedBuilder()
                .setTitle('Danh S√°ch Chat To√†n C·ª•c')
                .setColor('#00FF00')
                .setDescription('C√°c cu·ªôc tr√≤ chuy·ªán hi·ªán c√≥:')
                .setFooter({ 
                    text: `Y√™u c·∫ßu b·ªüi ${message.author.tag}`, 
                    iconURL: message.author.displayAvatarURL() 
                })
                .setTimestamp();
            
            for (const chat of chatList) {
                embed.addFields({
                    name: `Chat ID: ${chat.chatId}`, 
                    value: `S·ªë tin nh·∫Øn: ${chat.messageCount}`,
                    inline: false
                });
            }
            
            await message.channel.send({ embeds: [embed] });
            
        } catch (error) {
           console.error(`L·ªói khi xem danh s√°ch chat: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch chat.');
        }
    },

    async startNewGlobalChat(message) {
        try {
            const newChat = await db.createNewGlobalChat();
            message.reply(`ƒê√£ t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi. Chat ID c·ªßa b·∫°n l√†: **${newChat.chatId}**`);
        } catch (error) {
           console.error(`L·ªói khi t·∫°o chat m·ªõi: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi t·∫°o chat m·ªõi.');
        }
    },

    async continueGlobalChat(message, chatId) {
        if (!chatId || !chatId.startsWith('g')) {
            return message.reply('Vui l√≤ng cung c·∫•p Chat ID h·ª£p l·ªá (v√≠ d·ª•: g1, g2).');
        }

        try {
            const messages = await db.getGlobalChatMessages(chatId, 5);
            
            if (messages.length === 0) {
                return message.reply(`Kh√¥ng t√¨m th·∫•y tin nh·∫Øn trong chat ${chatId}.`);
            }
            
            const embed = new EmbedBuilder()
                .setTitle(`Ti·∫øp t·ª•c Chat: ${chatId}`)
                .setColor('#0099ff')
                .setDescription('C√°c tin nh·∫Øn g·∫ßn ƒë√¢y:')
                .setFooter({ 
                    text: `Y√™u c·∫ßu b·ªüi ${message.author.tag}`, 
                    iconURL: message.author.displayAvatarURL() 
                })
                .setTimestamp();
            
            messages.forEach(msg => {
                const roleName = msg.role === 'user' ? 'üë§' : 'ü§ñ';
                embed.addFields({
                    name: `${roleName} ${msg.user_id}`, 
                    value: msg.content.substring(0, 200) + (msg.content.length > 200 ? '...' : ''),
                    inline: false
                });
            });
            
            await message.channel.send({ embeds: [embed] });
            message.reply(`ƒê√£ chuy·ªÉn ƒë·∫øn chat ${chatId}. B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c tr√≤ chuy·ªán.`);
            
        } catch (error) {
           console.error(`L·ªói khi ti·∫øp t·ª•c chat: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi ti·∫øp t·ª•c chat.');
        }
    },

    async processGlobalChatMessage(message, args, model, sendEmbedMessage) {
        if (!args.length) {
            return message.reply('Vui l√≤ng nh·∫≠p n·ªôi dung ƒë·ªÉ tr√≤ chuy·ªán v·ªõi AI.');
        }
    
        const userId = message.author.id;
        const prompt = args.join(' ');
    
        try {
            // Ki·ªÉm tra chat hi·ªán t·∫°i
            let currentChat = await db.getLatestGlobalChat();
            
            // N·∫øu ch∆∞a c√≥ chat ho·∫∑c chat cu·ªëi ƒë√£ c√≥ qu√° nhi·ªÅu tin nh·∫Øn, t·∫°o chat m·ªõi
            if (!currentChat || currentChat.messageCount > 50) {
                currentChat = await db.createNewGlobalChat();
            }
    
            // Th√¥ng b√°o ƒëang x·ª≠ l√Ω
            const processingMsg = await message.channel.send('ü§î ƒêang x·ª≠ l√Ω...');
            
            // L·∫•y l·ªãch s·ª≠ chat
            let historyRows = await db.getGlobalChatMessages(currentChat.chatId, 5);
            
            // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ DB sang ƒë·ªãnh d·∫°ng Gemini API
            let conversation = historyRows.map(row => ({
                role: row.role,
                parts: [{ text: row.content }]
            }));
            
            // B·∫Øt ƒë·∫ßu chat v·ªõi l·ªãch s·ª≠
            const chat = model.startChat({
                history: conversation,
                generationConfig: {
                    maxOutputTokens: 1000,
                }
            });
            
            // G·ª≠i tin nh·∫Øn t·ªõi AI
            const result = await chat.sendMessage(prompt);
            const content = result.response.text();
            
            // L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng v√† c√¢u tr·∫£ l·ªùi AI v√†o chat
            await db.addGlobalChatMessage(userId, 'user', prompt, currentChat.sequence);
            await db.addGlobalChatMessage('system', 'model', content, currentChat.sequence);
            
            // X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
            await processingMsg.delete();
            
            // G·ª≠i ph·∫£n h·ªìi t·ªõi k√™nh
            await sendEmbedMessage(message.channel, message.author, content);
            
        } catch (error) {
           console.error(`L·ªói trong chat to√†n c·ª•c: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    },
    
    async showGlobalChatList(message) {
        try {
            const chatList = await db.getGlobalChatList();
            
            if (chatList.length === 0) {
                return message.reply('Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o.');
            }
            
            const embed = new EmbedBuilder()
                .setTitle('Danh S√°ch Chat To√†n C·ª•c')
                .setColor('#00FF00')
                .setDescription('C√°c cu·ªôc tr√≤ chuy·ªán hi·ªán c√≥:')
                .setFooter({ 
                    text: `Y√™u c·∫ßu b·ªüi ${message.author.tag}`, 
                    iconURL: message.author.displayAvatarURL() 
                })
                .setTimestamp();
            
            for (const chat of chatList) {
                embed.addFields({
                    name: `Chat ID: ${chat.chatId}`, 
                    value: `S·ªë tin nh·∫Øn: ${chat.messageCount}\nT√≥m t·∫Øt: ${chat.summary}`,
                    inline: false
                });
            }
            
            await message.channel.send({ embeds: [embed] });
            
        } catch (error) {
           console.error(`L·ªói khi xem danh s√°ch chat: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch chat.');
        }
    },
    
};