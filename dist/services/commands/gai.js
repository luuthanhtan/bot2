import { EmbedBuilder } from 'discord.js';
import { GlobalChat } from '../../models/global_chat.js';
import '../../utils/logger.js';
export default {
    name: 'gai',
    description: 'Tr√≤ chuy·ªán AI trong chat to√†n c·ª•c v·ªõi c√°c cu·ªôc tr√≤ chuy·ªán ri√™ng bi·ªát',
    async execute({ message, args, config, logModAction, sendEmbedMessage, client, model, gchatM }) {
        const subCommand = args[0] ? args[0].toLowerCase() : null;
        switch (subCommand) {
            case 'history':
                return await this.showGlobalChatList(message);
            case 'newchat.js':
                return await this.startNewGlobalChat(message);
            case 'continue':
                return await this.continueGlobalChat(message, args[1]);
            case 'deletehistory':
                return await this.deleteGlobalChatHistory(message, args[1]);
            default:
                return await this.processGlobalChatMessage(message, args, model, sendEmbedMessage);
        }
    },
    async deleteGlobalChatHistory(message, chatId = null) {
        try {
            const userId = message.author.id;
            let processingMsg;
            const gChatModel = new GlobalChat();
            if (chatId) {
                if (!chatId.match(/^g\d+$/)) {
                    message.reply('‚ùå ID cu·ªôc tr√≤ chuy·ªán kh√¥ng h·ª£p l·ªá. ID ph·∫£i c√≥ ƒë·ªãnh d·∫°ng "g" theo sau l√† m·ªôt s·ªë, v√≠ d·ª•: a1, a2, a3, ...');
                    return;
                }
                if ('send' in message.channel) {
                    processingMsg = await message.channel.send(`üóëÔ∏è ƒêang x√≥a cu·ªôc tr√≤ chuy·ªán ${chatId}...`);
                }
                try {
                    await gChatModel.deleteGlobalChatById(chatId);
                    await processingMsg?.delete().catch(() => { });
                    await message.reply(`‚úÖ ƒê√£ x√≥a cu·ªôc tr√≤ chuy·ªán ${chatId}.`);
                    console.log(`User ${message.author.tag} (${userId}) ƒë√£ x√≥a cu·ªôc tr√≤ chuy·ªán ${chatId}.`);
                }
                catch (error) {
                    await processingMsg?.delete().catch(() => { });
                    await message.reply(`‚ùå ${error.message}`);
                }
            }
            else {
                if ('send' in message.channel) {
                    processingMsg = await message.channel.send('üóëÔ∏è ƒêang x√≥a to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán...');
                }
                await gChatModel.deleteGlobalChatHistory();
                await gChatModel.createNewGlobalChat(userId);
                await processingMsg?.delete().catch(() => { });
                await message.reply('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa b·∫°n v·ªõi AI. M·ªôt cu·ªôc tr√≤ chuy·ªán m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o.');
                console.log(`User ${message.author.tag} (${userId}) ƒë√£ x√≥a to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán AI.`);
                return;
            }
        }
        catch (error) {
            console.error(`L·ªói khi x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán: ${error.message}`);
            message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    },
    async showGlobalChatList(message) {
        try {
            const globalChatM = new GlobalChat();
            const chatList = await globalChatM.getGlobalChatsWithMessageCounts();
            if (chatList.length === 0) {
                message.reply('Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o. ü™π');
                return;
            }
            const embed = new EmbedBuilder()
                .setTitle('Danh S√°ch Chat To√†n C·ª•c')
                .setColor('#00FF00')
                .setDescription('C√°c cu·ªôc tr√≤ chuy·ªán hi·ªán c√≥:')
                .setFooter({
                text: `Y√™u c·∫ßu b·ªüi ${message.author.tag}`,
                iconURL: message.author.displayAvatarURL()
            })
                .setTimestamp();
            for (const chat of chatList) {
                embed.addFields({
                    name: `Chat ID: ${chat.chat_id}`,
                    value: `S·ªë tin nh·∫Øn: ${chat?._count?.global_chat_messages || 0}`,
                    inline: false
                });
            }
            if ('send' in message.channel) {
                await message.channel.send({ embeds: [embed] });
                return;
            }
        }
        catch (error) {
            console.error(`‚ùå L·ªói khi xem danh s√°ch chat: ${error.message}`);
            message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch chat.');
        }
    },
    async startNewGlobalChat(message) {
        const senderId = message.author.id;
        try {
            const globalChatM = new GlobalChat();
            await globalChatM.createNewGlobalChat(senderId);
            await message.reply('ƒê√£ t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán v·ªõi l·ªánh `!gai`.');
            console.log(`User ${message.author.tag} (${senderId}) ƒë√£ t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi.`);
        }
        catch (error) {
            console.error(`L·ªói khi t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi: ${error.message}`);
            message.reply('C√≥ l·ªói x·∫£y ra khi t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    },
    async continueGlobalChat(message, chatId) {
        if (!chatId || !chatId.startsWith('g')) {
            message.reply('üíÅ Vui l√≤ng cung c·∫•p Chat ID h·ª£p l·ªá (v√≠ d·ª•: g1, g2).');
            return;
        }
        try {
            const globalChatM = new GlobalChat();
            const chats = await globalChatM.getGlobalChats();
            const targetChat = chats.find(chat => chat.chat_id === chatId);
            if (!targetChat) {
                message.reply(`Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán v·ªõi ID "${chatId}". Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c s·ª≠ d·ª•ng l·ªánh \`!chats\` ƒë·ªÉ xem danh s√°ch cu·ªôc tr√≤ chuy·ªán c·ªßa b·∫°n.`);
                return;
            }
            await globalChatM.save({ id: targetChat.id, updated_at: new Date() });
            const messages = await globalChatM.getGlobalChatMessages(targetChat.id, 5);
            if (messages.length === 0) {
                message.reply(`Kh√¥ng t√¨m th·∫•y tin nh·∫Øn trong chat ${chatId}. üôà`);
                return;
            }
            const embed = new EmbedBuilder()
                .setTitle(`Ti·∫øp t·ª•c Chat: ${chatId}`)
                .setColor('#0099ff')
                .setDescription('C√°c tin nh·∫Øn g·∫ßn ƒë√¢y:')
                .setFooter({
                text: `Y√™u c·∫ßu b·ªüi ${message.author.tag}`,
                iconURL: message.author.displayAvatarURL()
            })
                .setTimestamp();
            messages.forEach(msg => {
                const roleName = msg.role === 'user' ? 'üë§' : 'ü§ñ';
                const uid = msg.role === 'user' ? msg.name : "";
                embed.addFields({
                    name: `${roleName} ${uid}`,
                    value: msg.content.substring(0, 200) + (msg.content.length > 200 ? '...' : ''),
                    inline: false
                });
            });
            if ('send' in message.channel) {
                await message.channel.send({ embeds: [embed] });
            }
            message.reply(`ƒê√£ chuy·ªÉn ƒë·∫øn chat ${chatId}. B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c tr√≤ chuy·ªán. üí¨`);
        }
        catch (error) {
            console.error(`‚ùå L·ªói khi ti·∫øp t·ª•c chat: ${error.message}`);
            message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi ti·∫øp t·ª•c chat.');
        }
    },
    async processGlobalChatMessage(message, args, model, sendEmbedMessage) {
        if (!args.length) {
            message.reply('Vui l√≤ng nh·∫≠p n·ªôi dung ƒë·ªÉ tr√≤ chuy·ªán v·ªõi AI. üí¨');
            return;
        }
        const userId = message.author.id;
        const userName = message.author.displayName;
        const prompt = args.join(' ');
        let processingMsg;
        try {
            const globalChatM = new GlobalChat();
            if ('send' in message.channel) {
                processingMsg = await message.channel.send('ü§î ƒêang x·ª≠ l√Ω 1...');
            }
            const currentChat = await globalChatM.getCurrentGlobalChat();
            let historyRows = await globalChatM.getGlobalChatMessages(currentChat.id, 5);
            let conversation = historyRows.map(row => ({
                role: row.role,
                parts: [{ text: row.content }]
            }));
            if (conversation.length === 0) {
                try {
                    const result = await model.generateContent(prompt);
                    const content = result.response.text();
                    await globalChatM.addGlobalChatMessage(userId, 'user', prompt, userName);
                    await globalChatM.addGlobalChatMessage(userId, 'model', content, userName);
                    await this.summarizeAndUpdateGlobalChatTitle(model);
                    await processingMsg?.delete();
                    await sendEmbedMessage(message.channel, message.author, content);
                }
                catch (error) {
                    console.log(`L·ªói khi g·ªçi generateContent: ${error.message}`);
                    await processingMsg?.delete();
                    message.reply('C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
                return;
            }
            try {
                const chat = model.startChat({
                    history: conversation,
                    generationConfig: {
                        maxOutputTokens: 1000,
                    }
                });
                const result = await chat.sendMessage(prompt);
                const content = result.response.text();
                await globalChatM.addGlobalChatMessage(userId, 'user', prompt, userName);
                await globalChatM.addGlobalChatMessage(userId, 'model', content, userName);
                await this.summarizeAndUpdateGlobalChatTitle(model);
                await processingMsg?.delete();
                await sendEmbedMessage(message.channel, message.author, content);
                return;
            }
            catch (error) {
                console.error(`L·ªói khi g·ªçi startChat: ${error.message}`);
                await processingMsg?.delete();
                message.reply('C√≥ l·ªói x·∫£y ra khi g·ªçi AI. ƒêang th·ª≠ l·∫°i v·ªõi cu·ªôc tr√≤ chuy·ªán m·ªõi...');
                try {
                    await globalChatM.createNewGlobalChat(userId);
                    const result = await model.generateContent(prompt);
                    const content = result.response.text();
                    await globalChatM.addGlobalChatMessage(userId, 'user', prompt, userName);
                    await globalChatM.addGlobalChatMessage(userId, 'model', content, userName);
                    await this.summarizeAndUpdateGlobalChatTitle(model);
                    await sendEmbedMessage(message.channel, message.author, content);
                    return;
                }
                catch (fallbackError) {
                    console.log(`L·ªói khi th·ª≠ l·∫°i v·ªõi generateContent: ${fallbackError.message}`);
                    message.reply('C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
            }
        }
        catch (error) {
            console.log(`‚ùå L·ªói trong chat to√†n c·ª•c: ${error.message}`);
            message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    },
    async summarizeAndUpdateGlobalChatTitle(model) {
        try {
            const globalChatM = new GlobalChat();
            const currentChat = await globalChatM.getCurrentGlobalChat();
            // L·∫•y 5 tin nh·∫Øn g·∫ßn ƒë√¢y
            const messages = await globalChatM.getGlobalChatMessages(currentChat.id, 5);
            if (messages.length === 0) {
                return;
            }
            // T·∫°o context cho AI
            let context = messages.map(msg => `${msg.role === 'user' ? 'Ng∆∞·ªùi d√πng' : 'AI'}: ${msg.content}`).reverse().join('\n');
            // Prompt ƒë·ªÉ t√≥m t·∫Øt
            const prompt = `D·ª±a v√†o ƒëo·∫°n h·ªôi tho·∫°i sau, h√£y t·∫°o m·ªôt ti√™u ƒë·ªÅ ng·∫Øn g·ªçn (d∆∞·ªõi 50 k√Ω t·ª±) cho cu·ªôc tr√≤ chuy·ªán n√†y:\n\n${context}\n\nTi√™u ƒë·ªÅ:`;
            // G·ªçi AI ƒë·ªÉ t√≥m t·∫Øt
            const result = await model.generateContent(prompt);
            let title = result.response.text().trim();
            // ƒê·∫£m b·∫£o ti√™u ƒë·ªÅ kh√¥ng qu√° d√†i
            if (title.length > 50) {
                title = title.substring(0, 47) + '...';
            }
            // Th√™m chat_id v√†o ti√™u ƒë·ªÅ
            title = `[${currentChat.chat_id}] ${title}`;
            // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ
            await globalChatM.updateChatTitle(currentChat.id, title);
            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ cho cu·ªôc tr√≤ chuy·ªán ${currentChat.id}: ${title}`);
        }
        catch (error) {
            console.error('L·ªói khi t√≥m t·∫Øt cu·ªôc tr√≤ chuy·ªán:', error);
        }
    }
};
