import { config } from 'dotenv';
import { REST, Routes } from 'discord.js';

config();

const token = process.env.DISCORD_TOKEN;
const clientId = process.env.CLIENT_ID;
const guildId = process.env.GUILD_ID; // optional

if (!token || !clientId) {
  console.error('‚ùå Thi·∫øu DISCORD_TOKEN ho·∫∑c CLIENT_ID trong .env');
  process.exit(1);
}

const rest = new REST({ version: '10' }).setToken(token);

async function clearCommands() {
  try {
    if (guildId) {
      // Xo√° Slash Commands trong m·ªôt guild c·ª• th·ªÉ
      const commands = await rest.get(
        Routes.applicationGuildCommands(clientId || '', guildId)
      ) as any[];

      console.log(`üßπ ƒêang xo√° ${commands.length} l·ªánh (GUILD: ${guildId})`);
      for (const cmd of commands) {
        await rest.delete(
          Routes.applicationGuildCommand(clientId || '', guildId, cmd.id)
        );
        console.log(`‚ùå ƒê√£ xo√° l·ªánh: ${cmd.name}`);
      }
    } else {
      // Xo√° Slash Commands to√†n c·ª•c
      const commands = await rest.get(
        Routes.applicationCommands(clientId || '')
      ) as any[];

      console.log(`üßπ ƒêang xo√° ${commands.length} l·ªánh to√†n c·ª•c`);
      for (const cmd of commands) {
        await rest.delete(
          Routes.applicationCommand(clientId || '', cmd.id)
        );
        console.log(`‚ùå ƒê√£ xo√° l·ªánh: ${cmd.name}`);
      }
    }

    console.log('‚úÖ ƒê√£ xo√° to√†n b·ªô l·ªánh th√†nh c√¥ng!');
  } catch (error) {
    console.error('‚ùå L·ªói khi xo√° l·ªánh:', error);
  }
}

clearCommands();
