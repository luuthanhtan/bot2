import { GenerativeModel } from '@google/generative-ai';
import { GuildMember, NewsChannel, TextChannel } from 'discord.js';
import { Chat as ChatModel } from '../../models/chat.js';
import '../../utils/logger.js';

import { ChatHistory, ChatMessage, ExecuteParams, Command } from './types.js';
interface AiCommand extends Command {
    summarizeAndUpdateChatTitle: (userId: string, model: GenerativeModel) => Promise<void>;
    generateChatTitle: (userId: string, model: GenerativeModel) => Promise<string>;
}

export default {
    name: 'ai',
    description: 'Talk to the AI with persistent conversation history using the current chat. ü§ñ',
    
    async execute({ message, args, config, logModAction, sendEmbedMessage, client, model, chatM }: ExecuteParams): Promise<void> {
        if (!args.length) {
            message.reply('‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p n·ªôi dung ƒë·ªÉ g·ªçi AI.');
            return;
        }

        let userId: string = message.author.id;
        const member: GuildMember | undefined = message.mentions.members?.first();
        if (member) {
            userId = member.id;
            args.shift();
        }
        const prompt: string = args.join(' ');

        try {
            let processingMsg;
            if (message.channel instanceof TextChannel || message.channel instanceof NewsChannel) {
                processingMsg = await message.channel.send('ü§î ƒêang x·ª≠ l√Ω...');
            }
            
            let historyRows = await chatM.getUserChatHistory(userId, 5);
            
            let conversation: ChatHistory[] = historyRows.map(row => ({
                role: row.role,
                parts: [{ text: row.content }]
            }));
            
            console.log(`üó£Ô∏è L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán c·ªßa ${userId}: ${JSON.stringify(conversation)}`);
            
            if (conversation.length === 0) {
                try {
                    const result = await model.generateContent(prompt);
                    const content: string = result.response.text();
                    
                    await chatM.addChatMessage(userId, 'user', prompt);
                    await chatM.addChatMessage(userId, 'model', content);
                    
                    await this.summarizeAndUpdateChatTitle(userId, model);
                    
                    await processingMsg?.delete();
                    
                    await sendEmbedMessage(message.channel, message.author, content);
                                        
                } catch (error: any) {
                    console.error(`‚ùå L·ªói khi g·ªçi generateContent: ${error.message}`);
                    await processingMsg?.delete();
                    message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
                return;
            }
            
            try {
                const chat = model.startChat({
                    history: conversation,
                    generationConfig: {
                        maxOutputTokens: 1000,
                    }
                });
                
                const result = await chat.sendMessage(prompt);
                const content: string = result.response.text();
                
                await chatM.addChatMessage(userId, 'user', prompt);
                await chatM.addChatMessage(userId, 'model', content);
                
                await this.summarizeAndUpdateChatTitle(userId, model);
                
                await processingMsg?.delete();
                
                await sendEmbedMessage(message.channel, message.author, content);
                                
            } catch (error: any) {
                console.error(`‚ùå L·ªói khi g·ªçi startChat: ${error.message}`);
                await processingMsg?.delete();
                
                message.reply('üîÑ ƒêang th·ª≠ l·∫°i v·ªõi cu·ªôc tr√≤ chuy·ªán m·ªõi...');
                
                try {
                    await chatM.createNewChat(userId);
                    
                    const result = await model.generateContent(prompt);
                    const content: string = result.response.text();
                    
                   await chatM.addChatMessage(userId, 'user', prompt);
                   await chatM.addChatMessage(userId, 'model', content);
                    
                    await this.summarizeAndUpdateChatTitle(userId, model);
                    
                    await sendEmbedMessage(message.channel, message.author, content);
                    
                } catch (fallbackError: any) {
                    console.error(`‚ùå L·ªói khi th·ª≠ l·∫°i v·ªõi generateContent: ${fallbackError.message}`);
                    message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
            }
        } catch (error: any) {
            console.error(`‚ùå L·ªói chung khi g·ªçi AI: ${error.message}`);
            message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    },

    async summarizeAndUpdateChatTitle(userId: string, model: GenerativeModel): Promise<void> {
        try {
            const currentChat = await (new ChatModel()).getCurrentChat(userId);
    
            const messages: ChatMessage[] = await (new ChatModel()).getChatMessages(currentChat.id, 5);
    
            if (messages.length === 0) {
                return;
            }
    
            let context: string = messages.map(msg => 
                `${msg.role === 'user' ? 'Ng∆∞·ªùi d√πng' : 'AI'}: ${msg.content}`
            ).reverse().join('\n');
    
            const prompt: string = `D·ª±a v√†o ƒëo·∫°n h·ªôi tho·∫°i sau, h√£y t·∫°o m·ªôt ti√™u ƒë·ªÅ ng·∫Øn g·ªçn (d∆∞·ªõi 50 k√Ω t·ª±) cho cu·ªôc tr√≤ chuy·ªán n√†y:\n\n${context}\n\nTi√™u ƒë·ªÅ:`;
    
            const result = await model.generateContent(prompt);
            let title: string = result.response.text().trim();
    
            if (title.length > 50) {
                title = title.substring(0, 47) + '...';
            }
    
            title = `[${currentChat.chat_id}] ${title}`;
    
            await (new ChatModel()).save({ title }, { id: currentChat.id });
    
            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ cho cu·ªôc tr√≤ chuy·ªán ${currentChat.id}: ${title}`);
    
        } catch (error: any) {
            console.error(`‚ùå L·ªói khi t√≥m t·∫Øt cu·ªôc tr√≤ chuy·ªán: ${error.message}`);
        }
    }
} as AiCommand;